/*
 * Tep.Sales.Service API
 * Tep.Sales.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@tecnoepec.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllIntegrationStatusResponse} from '../model/GetAllIntegrationStatusResponse';
import {GetAllPagedIntegrationStatusResponse} from '../model/GetAllPagedIntegrationStatusResponse';
import {IntegrationStatusActions} from '../model/IntegrationStatusActions';
import {Operation} from '../model/Operation';
import {PostIntegrationStatusRequest} from '../model/PostIntegrationStatusRequest';
import {PostIntegrationStatusResponse} from '../model/PostIntegrationStatusResponse';
import {PutIntegrationStatusRequest} from '../model/PutIntegrationStatusRequest';

/**
* IntegrationStatus service.
* @module api/IntegrationStatusApi
* @version v1
*/
export class IntegrationStatusApi {

    /**
    * Constructs a new IntegrationStatusApi. 
    * @alias module:api/IntegrationStatusApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdIntegrationStatus operation.
     * @callback moduleapi/IntegrationStatusApi~getByIdIntegrationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllIntegrationStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IntegrationStatus by id
     * @param {String} id IntegrationStatus id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~getByIdIntegrationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdIntegrationStatus(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdIntegrationStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllIntegrationStatusResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusAllGet operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAllIntegrationStatusResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IntegrationStatus by filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @param {module:model/IntegrationStatusActions} opts.action 
     * @param {String} opts.status 
     * @param {String} opts.summary 
     * @param {Number} opts.dateRange 
     * @param {Number} opts.limit limit (default to <.>)
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationStatusAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'context': opts['context'],'action': opts['action'],'status': opts['status'],'summary': opts['summary'],'dateRange': opts['dateRange'],'limit': opts['limit'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAllIntegrationStatusResponse];

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusIdDelete operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete IntegrationStatus by Id
     * @param {String} id IntegrationStatus id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationStatusIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationStatusIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusIdPatch operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of IntegrationStatus
     * Sample request:                    PATCH /tepsales/v1/IntegrationStatus/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id IntegrationStatus id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationStatusIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tepsalesV1IntegrationStatusIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationStatusIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusIdPut operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update IntegrationStatus
     * @param {String} id IntegrationStatus Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutIntegrationStatusRequest} opts.body IntegrationStatus to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationStatusIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationStatusIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusPagedGet operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusPagedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedIntegrationStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IntegrationStatus by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.context 
     * @param {module:model/IntegrationStatusActions} opts.action 
     * @param {String} opts.status 
     * @param {String} opts.summary 
     * @param {Number} opts.dateRange 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusPagedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationStatusPagedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'context': opts['context'],'action': opts['action'],'status': opts['status'],'summary': opts['summary'],'dateRange': opts['dateRange'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedIntegrationStatusResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationStatusPost operation.
     * @callback moduleapi/IntegrationStatusApi~tepsalesV1IntegrationStatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostIntegrationStatusResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IntegrationStatus
     * @param {Object} opts Optional parameters
     * @param {module:model/PostIntegrationStatusRequest} opts.body IntegrationStatus to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationStatusApi~tepsalesV1IntegrationStatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationStatusPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostIntegrationStatusResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/status', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}