/*
 * Tep.Sales.Service API
 * Tep.Sales.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@tecnoepec.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllIntegrationConfigRequest} from '../model/GetAllIntegrationConfigRequest';
import {GetAllIntegrationConfigResponse} from '../model/GetAllIntegrationConfigResponse';
import {GetAllPagedIntegrationConfigResponse} from '../model/GetAllPagedIntegrationConfigResponse';
import {Operation} from '../model/Operation';
import {PostIntegrationConfigRequest} from '../model/PostIntegrationConfigRequest';
import {PostIntegrationConfigResponse} from '../model/PostIntegrationConfigResponse';
import {PutIntegrationConfigRequest} from '../model/PutIntegrationConfigRequest';

/**
* IntegrationConfig service.
* @module api/IntegrationConfigApi
* @version v1
*/
export class IntegrationConfigApi {

    /**
    * Constructs a new IntegrationConfigApi. 
    * @alias module:api/IntegrationConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdIntegrationConfig operation.
     * @callback moduleapi/IntegrationConfigApi~getByIdIntegrationConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllIntegrationConfigResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IntegrationConfig by id
     * @param {String} id IntegrationConfig id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~getByIdIntegrationConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdIntegrationConfig(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdIntegrationConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllIntegrationConfigResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigAllGet operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAllIntegrationConfigResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IntegrationConfig by filter
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAllIntegrationConfigRequest} opts.model filter
     * @param {Number} opts.limit limit (default to <.>)
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationConfigAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'model': opts['model'],'limit': opts['limit'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAllIntegrationConfigResponse];

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigIdDelete operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete IntegrationConfig by Id
     * @param {String} id IntegrationConfig id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationConfigIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationConfigIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigIdPatch operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of IntegrationConfig
     * Sample request:                    PATCH /tepsales/v1/IntegrationConfig/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id IntegrationConfig id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationConfigIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tepsalesV1IntegrationConfigIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationConfigIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigIdPut operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update IntegrationConfig
     * @param {String} id IntegrationConfig Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutIntegrationConfigRequest} opts.body IntegrationConfig to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1IntegrationConfigIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1IntegrationConfigIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigPagedGet operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigPagedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedIntegrationConfigResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All IntegrationConfig by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigPagedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationConfigPagedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedIntegrationConfigResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1IntegrationConfigPost operation.
     * @callback moduleapi/IntegrationConfigApi~tepsalesV1IntegrationConfigPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostIntegrationConfigResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create IntegrationConfig
     * @param {Object} opts Optional parameters
     * @param {module:model/PostIntegrationConfigRequest} opts.body IntegrationConfig to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/IntegrationConfigApi~tepsalesV1IntegrationConfigPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1IntegrationConfigPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostIntegrationConfigResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/integration/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}