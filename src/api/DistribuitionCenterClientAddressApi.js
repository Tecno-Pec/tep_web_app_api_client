/*
 * Tep.Sales.Service API
 * Tep.Sales.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@tecnoepec.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {DistribuitionCenterClientAddressStatus} from '../model/DistribuitionCenterClientAddressStatus';
import {ErrorDetails} from '../model/ErrorDetails';
import {GetAllDistribuitionCenterClientAddressResponse} from '../model/GetAllDistribuitionCenterClientAddressResponse';
import {GetAllPagedDistribuitionCenterClientAddressResponse} from '../model/GetAllPagedDistribuitionCenterClientAddressResponse';
import {Operation} from '../model/Operation';
import {PostDistribuitionCenterClientAddressRequest} from '../model/PostDistribuitionCenterClientAddressRequest';
import {PostDistribuitionCenterClientAddressResponse} from '../model/PostDistribuitionCenterClientAddressResponse';
import {PutDistribuitionCenterClientAddressRequest} from '../model/PutDistribuitionCenterClientAddressRequest';

/**
* DistribuitionCenterClientAddress service.
* @module api/DistribuitionCenterClientAddressApi
* @version v1
*/
export class DistribuitionCenterClientAddressApi {

    /**
    * Constructs a new DistribuitionCenterClientAddressApi. 
    * @alias module:api/DistribuitionCenterClientAddressApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getByIdDistribuitionCenterClientAddress operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~getByIdDistribuitionCenterClientAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllDistribuitionCenterClientAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DistribuitionCenterClientAddress by id
     * @param {String} id DistribuitionCenterClientAddress id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~getByIdDistribuitionCenterClientAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getByIdDistribuitionCenterClientAddress(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getByIdDistribuitionCenterClientAddress");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllDistribuitionCenterClientAddressResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressAllGet operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GetAllDistribuitionCenterClientAddressResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All DistribuitionCenterClientAddress by filter
     * @param {Object} opts Optional parameters
     * @param {String} opts.distribuitionCenterId 
     * @param {String} opts.addressId 
     * @param {String} opts.externalCode 
     * @param {module:model/DistribuitionCenterClientAddressStatus} opts.status 
     * @param {Number} opts.limit limit (default to <.>)
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1DistribuitionCenterClientAddressAllGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'distribuitionCenterId': opts['distribuitionCenterId'],'addressId': opts['addressId'],'externalCode': opts['externalCode'],'status': opts['status'],'limit': opts['limit'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GetAllDistribuitionCenterClientAddressResponse];

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressIdDelete operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DistribuitionCenterClientAddress by Id
     * @param {String} id DistribuitionCenterClientAddress id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1DistribuitionCenterClientAddressIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1DistribuitionCenterClientAddressIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressIdPatch operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update part of DistribuitionCenterClientAddress
     * Sample request:                    PATCH /tepsales/v1/DistribuitionCenterClientAddress/{id}      [          {              \&quot;op\&quot;: \&quot;replace\&quot;,              \&quot;path\&quot;: \&quot;/atribute_name\&quot;,              \&quot;value\&quot;: \&quot;new value\&quot;          }      ]
     * @param {Array.<module:model/Operation>} body Atributes values
     * @param {String} id DistribuitionCenterClientAddress id
     * @param {Object} opts Optional parameters
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1DistribuitionCenterClientAddressIdPatch(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling tepsalesV1DistribuitionCenterClientAddressIdPatch");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1DistribuitionCenterClientAddressIdPatch");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressIdPut operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update DistribuitionCenterClientAddress
     * @param {String} id DistribuitionCenterClientAddress Id
     * @param {Object} opts Optional parameters
     * @param {module:model/PutDistribuitionCenterClientAddressRequest} opts.body DistribuitionCenterClientAddress to update
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tepsalesV1DistribuitionCenterClientAddressIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tepsalesV1DistribuitionCenterClientAddressIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressPagedGet operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressPagedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAllPagedDistribuitionCenterClientAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get All DistribuitionCenterClientAddress by filter with pagination
     * @param {Object} opts Optional parameters
     * @param {String} opts.distribuitionCenterId 
     * @param {String} opts.addressId 
     * @param {String} opts.externalCode 
     * @param {module:model/DistribuitionCenterClientAddressStatus} opts.status 
     * @param {Number} opts.page 
     * @param {Number} opts.pageSize 
     * @param {String} opts.sort Sorting atributes, sample: id.desc,name.asc (default to <.>)
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressPagedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1DistribuitionCenterClientAddressPagedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'distribuitionCenterId': opts['distribuitionCenterId'],'addressId': opts['addressId'],'externalCode': opts['externalCode'],'status': opts['status'],'page': opts['page'],'pageSize': opts['pageSize'],'sort': opts['sort']
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAllPagedDistribuitionCenterClientAddressResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress/paged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the tepsalesV1DistribuitionCenterClientAddressPost operation.
     * @callback moduleapi/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostDistribuitionCenterClientAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create DistribuitionCenterClientAddress
     * @param {Object} opts Optional parameters
     * @param {module:model/PostDistribuitionCenterClientAddressRequest} opts.body DistribuitionCenterClientAddress to create
     * @param {String} opts.xApiKey Your Api Key
     * @param {String} opts.xCsrfToken CSRF Protection (default to <.>)
     * @param {module:api/DistribuitionCenterClientAddressApi~tepsalesV1DistribuitionCenterClientAddressPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    tepsalesV1DistribuitionCenterClientAddressPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'x-api-key': opts['xApiKey'],'x-csrf-token': opts['xCsrfToken']
      };
      let formParams = {
        
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PostDistribuitionCenterClientAddressResponse;

      return this.apiClient.callApi(
        '/tepsales/v1/distribuitionCenterClientAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}