/*
 * Tep.Sales.Service API
 * Tep.Sales.Service API
 *
 * OpenAPI spec version: v1
 * Contact: admin@tecnoepec.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.46
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TepsalesserviceApi);
  }
}(this, function(expect, TepsalesserviceApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TepsalesserviceApi.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('getByIdUser', function() {
        it('should call getByIdUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getByIdUser call and complete the assertions
          /*
          var opts = {};

          instance.getByIdUser(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.GetAllUserResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserInfo', function() {
        it('should call getUserInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserInfo call and complete the assertions
          /*
          var opts = {};

          instance.getUserInfo(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.GetAllUserResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersAllGet', function() {
        it('should call tepsalesV1UsersAllGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersAllGet call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersAllGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TepsalesserviceApi.GetAllUserResponse);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersForcerchangepasswordPost', function() {
        it('should call tepsalesV1UsersForcerchangepasswordPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersForcerchangepasswordPost call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersForcerchangepasswordPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.PostUserResetPasswordResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersIdDelete', function() {
        it('should call tepsalesV1UsersIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersIdDelete call
          /*
          var opts = {};

          instance.tepsalesV1UsersIdDelete(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersIdPatch', function() {
        it('should call tepsalesV1UsersIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersIdPatch call
          /*
          var opts = {};

          instance.tepsalesV1UsersIdPatch(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersIdPut', function() {
        it('should call tepsalesV1UsersIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersIdPut call
          /*
          var opts = {};

          instance.tepsalesV1UsersIdPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersPagedGet', function() {
        it('should call tepsalesV1UsersPagedGet successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersPagedGet call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersPagedGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.GetAllPagedUserResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersPost', function() {
        it('should call tepsalesV1UsersPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersPost call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.PostUserResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersPushtokenPost', function() {
        it('should call tepsalesV1UsersPushtokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersPushtokenPost call
          /*
          var opts = {};

          instance.tepsalesV1UsersPushtokenPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersResetPasswordPost', function() {
        it('should call tepsalesV1UsersResetPasswordPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersResetPasswordPost call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersResetPasswordPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.PostUserResetPasswordResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersSigninPost', function() {
        it('should call tepsalesV1UsersSigninPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersSigninPost call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersSigninPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.PostUserSignInResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('tepsalesV1UsersSignupPost', function() {
        it('should call tepsalesV1UsersSignupPost successfully', function(done) {
          // TODO: uncomment, update parameter values for tepsalesV1UsersSignupPost call and complete the assertions
          /*
          var opts = {};

          instance.tepsalesV1UsersSignupPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TepsalesserviceApi.PostUserResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
